import numpy as np

from src.model_train import ConnectFourModelTrain

trainingdata = [
    (-1, [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0], [-1, 0, 0, 0, 0, 0, 0]]),
    (-1, [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0],
          [1, 0, 0, 0, 0, 0, 0], [-1, 0, 0, 0, 0, 0, 0]]),
    (-1, [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0],
          [1, 0, 0, 0, 0, 0, 0], [-1, -1, 0, 0, 0, 0, 0]]),
    (-1, [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0],
          [1, 0, 0, 0, 0, 0, 0], [-1, -1, 1, 0, 0, 0, 0]]),
    (-1, [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0],
          [1, 0, -1, 0, 0, 0, 0], [-1, -1, 1, 0, 0, 0, 0]]),
    (-1, [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0],
          [1, 1, -1, 0, 0, 0, 0], [-1, -1, 1, 0, 0, 0, 0]]),
    (-1, [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0],
          [1, 1, -1, 0, 0, 0, 0], [-1, -1, 1, -1, 0, 0, 0]]),
    (-1, [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0],
          [1, 1, -1, 0, 0, 0, 0], [-1, -1, 1, -1, 0, 0, 0]]),
    (-1, [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0],
          [1, 1, -1, -1, 0, 0, 0], [-1, -1, 1, -1, 0, 0, 0]]),
    (-1, [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0],
          [1, 1, -1, -1, 0, 0, 0], [-1, -1, 1, -1, 0, 0, 0]]),
    (-1, [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 1, -1, 1, 0, 0, 0],
          [1, 1, -1, -1, 0, 0, 0], [-1, -1, 1, -1, 0, 0, 0]]),
    (-1, [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0], [0, 1, -1, 1, 0, 0, 0],
          [1, 1, -1, -1, 0, 0, 0], [-1, -1, 1, -1, 0, 0, 0]]),
    (-1, [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, -1, 1, 0, 0, 0, 0], [0, 1, -1, 1, 0, 0, 0],
          [1, 1, -1, -1, 0, 0, 0], [-1, -1, 1, -1, 0, 0, 0]]),
    (-1, [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, -1, 1, 0, 0, 0, 0], [0, 1, -1, 1, 0, 0, 0],
          [1, 1, -1, -1, 0, 0, 0], [-1, -1, 1, -1, 0, 1, 0]]),
    (-1, [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, -1, 1, 0, 0, 0, 0], [0, 1, -1, 1, 0, 0, 0],
          [1, 1, -1, -1, 0, 0, 0], [-1, -1, 1, -1, -1, 1, 0]])]

model = ConnectFourModelTrain(42, 3, 50, 100)


def test_train_and_predict():
    model.train(trainingdata)


def test_train():
    board = [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], \
            [0, 0, 0, 0, 0, 0, 0], [-1, 0, 0, 0, 0, 0, 0]

    predict = model.predict(board, 2)

    assert isinstance(predict, np.floating)
    assert predict <= 1
